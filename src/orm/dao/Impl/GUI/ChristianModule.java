/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChristianModule.java
 *
 * Created on May 1, 2012, 8:49:13 AM
 */
package orm.dao.Impl.GUI;

import java.util.Date;
import java.util.List;
import orm.DAOFactory;
import orm.UserLog;

/**
 *
 * @author jean pierre
 */
public class ChristianModule extends javax.swing.JFrame {

    private String currentUser;
    private DAOFactory daoFactory = DAOFactory.getInstance();
    private E_CHURCH log;

    /** Creates new form ChristianModule */
    public ChristianModule() {
        initComponents();
        this.setLocationRelativeTo(null);
        disabler();
    }

    private void disabler() {
        smPastor.setEnabled(false);
        smPastorReport.setEnabled(false);
        smChurchAssignment.setEnabled(false);
        smMinistryAssessment.setEnabled(false);
        smOffertories.setEnabled(false);
        smOffertoryReport.setEnabled(false);
        smPrayerViewer.setEnabled(false);
        smPrayerRequest.setEnabled(false);
        smChristianInfo.setEnabled(false);
        smZoneAssignment.setEnabled(false);
        smZones.setEnabled(false);
        smChristianReport.setEnabled(false);
        smChristian.setEnabled(false);
        smWeddingReport.setEnabled(false);
        smWedding.setEnabled(false);
        smSacrament.setEnabled(false);
        smEvent.setEnabled(false);
        smInvited.setEnabled(false);
        smEventIncome.setEnabled(false);
    }

    private void enableAll() {
        smPastor.setEnabled(true);
        smPastorReport.setEnabled(true);
        smChurchAssignment.setEnabled(true);
        smMinistryAssessment.setEnabled(true);
        smOffertories.setEnabled(true);
        smOffertoryReport.setEnabled(true);
        smPrayerViewer.setEnabled(true);
        smPrayerRequest.setEnabled(true);
        smChristianInfo.setEnabled(true);
        smZoneAssignment.setEnabled(true);
        smZones.setEnabled(true);
        smChristianReport.setEnabled(true);
        smChristian.setEnabled(true);
        smWeddingReport.setEnabled(true);
        smWedding.setEnabled(true);
        smSacrament.setEnabled(true);
        smEvent.setEnabled(true);
        smInvited.setEnabled(true);
        smEventIncome.setEnabled(true);
    }

    public void enabler(List<String> roles) {
        for (String role : roles) {
            if (role.equals("PSR") || role.equals("ACT") || role.equals("CACT")) {
                enableReports();
            }
            if (role.equals("CLK")) {
                enableAll();
            }
        }
    }

    private void enableReports() {
        smPastorReport.setEnabled(true);
        smOffertoryReport.setEnabled(true);
        smChristianReport.setEnabled(true);
        smWeddingReport.setEnabled(true);
        smPrayerViewer.setEnabled(true);
    }

    public String getCurrentUser() {
        return currentUser;
    }

    public void setCurrentUser(String currentUser) {
        if (currentUser == null) {
            try {
                currentUser = daoFactory.getUserDAO().findAll().get(0).getUsername();
            } catch (Exception e) {
            }
        } else {
            this.currentUser = currentUser;
        }
    }

    public E_CHURCH getLog() {
        return log;
    }

    public void setLog(E_CHURCH log) {
        this.log = log;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        smPastor = new javax.swing.JMenuItem();
        smPastorReport = new javax.swing.JMenuItem();
        smChurchAssignment = new javax.swing.JMenuItem();
        smMinistryAssessment = new javax.swing.JMenuItem();
        smOffertories = new javax.swing.JMenuItem();
        smOffertoryReport = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        smChristian = new javax.swing.JMenuItem();
        smChristianReport = new javax.swing.JMenuItem();
        smZones = new javax.swing.JMenuItem();
        smZoneAssignment = new javax.swing.JMenuItem();
        smChristianInfo = new javax.swing.JMenuItem();
        smPrayerRequest = new javax.swing.JMenuItem();
        smPrayerViewer = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        smSacrament = new javax.swing.JMenuItem();
        smWedding = new javax.swing.JMenuItem();
        smWeddingReport = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        smEvent = new javax.swing.JMenuItem();
        smInvited = new javax.swing.JMenuItem();
        smEventIncome = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jMenu1.setText("Ministry");

        smPastor.setText("Pastor");
        smPastor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smPastorActionPerformed(evt);
            }
        });
        jMenu1.add(smPastor);

        smPastorReport.setText("Pastors Report");
        smPastorReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smPastorReportActionPerformed(evt);
            }
        });
        jMenu1.add(smPastorReport);

        smChurchAssignment.setText("Assign Pastor to Church");
        smChurchAssignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smChurchAssignmentActionPerformed(evt);
            }
        });
        jMenu1.add(smChurchAssignment);

        smMinistryAssessment.setText("Ministry Assessment");
        smMinistryAssessment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smMinistryAssessmentActionPerformed(evt);
            }
        });
        jMenu1.add(smMinistryAssessment);

        smOffertories.setText("Offertories");
        smOffertories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smOffertoriesActionPerformed(evt);
            }
        });
        jMenu1.add(smOffertories);

        smOffertoryReport.setText("Offertories Report");
        smOffertoryReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smOffertoryReportActionPerformed(evt);
            }
        });
        jMenu1.add(smOffertoryReport);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Christian Management");

        smChristian.setText("Christian");
        smChristian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smChristianActionPerformed(evt);
            }
        });
        jMenu2.add(smChristian);

        smChristianReport.setText("Christian Report");
        smChristianReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smChristianReportActionPerformed(evt);
            }
        });
        jMenu2.add(smChristianReport);

        smZones.setText("Zones");
        smZones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smZonesActionPerformed(evt);
            }
        });
        jMenu2.add(smZones);

        smZoneAssignment.setText("Assign Christian to Zone");
        smZoneAssignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smZoneAssignmentActionPerformed(evt);
            }
        });
        jMenu2.add(smZoneAssignment);

        smChristianInfo.setText("Christian Info");
        smChristianInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smChristianInfoActionPerformed(evt);
            }
        });
        jMenu2.add(smChristianInfo);

        smPrayerRequest.setText("Prayer Request");
        smPrayerRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smPrayerRequestActionPerformed(evt);
            }
        });
        jMenu2.add(smPrayerRequest);

        smPrayerViewer.setText("View Prayer Requests");
        smPrayerViewer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smPrayerViewerActionPerformed(evt);
            }
        });
        jMenu2.add(smPrayerViewer);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Sacraments");

        smSacrament.setText("Sacraments Schedule");
        smSacrament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smSacramentActionPerformed(evt);
            }
        });
        jMenu3.add(smSacrament);

        smWedding.setText("Wedding");
        smWedding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smWeddingActionPerformed(evt);
            }
        });
        jMenu3.add(smWedding);

        smWeddingReport.setText("Wedding Report");
        smWeddingReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smWeddingReportActionPerformed(evt);
            }
        });
        jMenu3.add(smWeddingReport);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Events");

        smEvent.setText("Event Recording");
        smEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smEventActionPerformed(evt);
            }
        });
        jMenu4.add(smEvent);

        smInvited.setText("Invited to Event");
        smInvited.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smInvitedActionPerformed(evt);
            }
        });
        jMenu4.add(smInvited);

        smEventIncome.setText("Event Income");
        smEventIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smEventIncomeActionPerformed(evt);
            }
        });
        jMenu4.add(smEventIncome);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 953, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 606, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void smPastorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smPastorActionPerformed
    PastorGUI pastorGUI = new PastorGUI();
    add(pastorGUI);
    pastorGUI.show();
}//GEN-LAST:event_smPastorActionPerformed

private void smChurchAssignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smChurchAssignmentActionPerformed
    ParishPastorGUI parishPastorGUI = new ParishPastorGUI();
    add(parishPastorGUI);
    parishPastorGUI.show();
}//GEN-LAST:event_smChurchAssignmentActionPerformed

private void smMinistryAssessmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smMinistryAssessmentActionPerformed
    MinistryAssessmentGUI ministryAssessmentGUI = new MinistryAssessmentGUI();
    add(ministryAssessmentGUI);
    ministryAssessmentGUI.show();
}//GEN-LAST:event_smMinistryAssessmentActionPerformed

private void smOffertoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smOffertoriesActionPerformed
    OffertoryGUI offertoryGUI = new OffertoryGUI();
    add(offertoryGUI);
    offertoryGUI.setEncoder(currentUser);
    offertoryGUI.show();
}//GEN-LAST:event_smOffertoriesActionPerformed

private void smChristianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smChristianActionPerformed
    ChristianGUI christianGUI = new ChristianGUI();
    add(christianGUI);
    christianGUI.setModule(this);
    christianGUI.show();
}//GEN-LAST:event_smChristianActionPerformed

private void smZonesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smZonesActionPerformed
    ZoneGUI zoneGUI = new ZoneGUI();
    add(zoneGUI);
    zoneGUI.show();
}//GEN-LAST:event_smZonesActionPerformed

private void smZoneAssignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smZoneAssignmentActionPerformed
    ChristianZoneGUI christianZoneGUI = new ChristianZoneGUI();
    add(christianZoneGUI);
    christianZoneGUI.show();
}//GEN-LAST:event_smZoneAssignmentActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    try {
//        UserLog userLog=daoFactory.getUserLogDAO().findLastLog(currentUser);
//        userLog.setLogout(new Date());
//        daoFactory.getUserLogDAO().saveOrUpdateLog(userLog);
        this.getLog().show();
        this.dispose();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}//GEN-LAST:event_formWindowClosing

private void smChristianInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smChristianInfoActionPerformed
    ChristianContactGUI christianContactGUI = new ChristianContactGUI();
    add(christianContactGUI);
    christianContactGUI.show();
}//GEN-LAST:event_smChristianInfoActionPerformed

private void smPrayerRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smPrayerRequestActionPerformed
    PrayerRequestGUI prayerRequestGUI = new PrayerRequestGUI();
    add(prayerRequestGUI);
    prayerRequestGUI.show();
}//GEN-LAST:event_smPrayerRequestActionPerformed

private void smPrayerViewerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smPrayerViewerActionPerformed
    PrayerRequestViewerGUI prayerRequestViewerGUI = new PrayerRequestViewerGUI();
    add(prayerRequestViewerGUI);
    prayerRequestViewerGUI.show();
}//GEN-LAST:event_smPrayerViewerActionPerformed

private void smSacramentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smSacramentActionPerformed
    SacrementScheduleGUI sacrementScheduleGUI = new SacrementScheduleGUI();
    add(sacrementScheduleGUI);
    sacrementScheduleGUI.show();
}//GEN-LAST:event_smSacramentActionPerformed

private void smWeddingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smWeddingActionPerformed
    WeddingGUI weddingGUI = new WeddingGUI();
    add(weddingGUI);
    weddingGUI.show();
}//GEN-LAST:event_smWeddingActionPerformed

private void smEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smEventActionPerformed
    EventGUI eventGUI = new EventGUI();
    add(eventGUI);
    eventGUI.show();
}//GEN-LAST:event_smEventActionPerformed

private void smInvitedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smInvitedActionPerformed
    EventInvitedGUI eventInvitedGUI = new EventInvitedGUI();
    add(eventInvitedGUI);
    eventInvitedGUI.show();
}//GEN-LAST:event_smInvitedActionPerformed

private void smEventIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smEventIncomeActionPerformed
    EventIncomeGUI eventIncomeGUI = new EventIncomeGUI();
    add(eventIncomeGUI);
    eventIncomeGUI.setLogger(currentUser);
    eventIncomeGUI.show();
}//GEN-LAST:event_smEventIncomeActionPerformed

private void smPastorReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smPastorReportActionPerformed
    PastorViewerGUI pastorViewerGUI = new PastorViewerGUI();
    add(pastorViewerGUI);
    pastorViewerGUI.show();
}//GEN-LAST:event_smPastorReportActionPerformed

private void smOffertoryReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smOffertoryReportActionPerformed
    OffertoryReportsGUI offertoryReportsGUI = new OffertoryReportsGUI();
    add(offertoryReportsGUI);
    offertoryReportsGUI.show();
}//GEN-LAST:event_smOffertoryReportActionPerformed

private void smChristianReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smChristianReportActionPerformed
    ChristianReport christianReport = new ChristianReport();
    add(christianReport);
    christianReport.show();
}//GEN-LAST:event_smChristianReportActionPerformed

private void smWeddingReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smWeddingReportActionPerformed
    WeddingReportGUI weddingReportGUI = new WeddingReportGUI();
    add(weddingReportGUI);
    weddingReportGUI.show();
}//GEN-LAST:event_smWeddingReportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChristianModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChristianModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChristianModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChristianModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ChristianModule().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem smChristian;
    private javax.swing.JMenuItem smChristianInfo;
    private javax.swing.JMenuItem smChristianReport;
    private javax.swing.JMenuItem smChurchAssignment;
    private javax.swing.JMenuItem smEvent;
    private javax.swing.JMenuItem smEventIncome;
    private javax.swing.JMenuItem smInvited;
    private javax.swing.JMenuItem smMinistryAssessment;
    private javax.swing.JMenuItem smOffertories;
    private javax.swing.JMenuItem smOffertoryReport;
    private javax.swing.JMenuItem smPastor;
    private javax.swing.JMenuItem smPastorReport;
    private javax.swing.JMenuItem smPrayerRequest;
    private javax.swing.JMenuItem smPrayerViewer;
    private javax.swing.JMenuItem smSacrament;
    private javax.swing.JMenuItem smWedding;
    private javax.swing.JMenuItem smWeddingReport;
    private javax.swing.JMenuItem smZoneAssignment;
    private javax.swing.JMenuItem smZones;
    // End of variables declaration//GEN-END:variables
}
