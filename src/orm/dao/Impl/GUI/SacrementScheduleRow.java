/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SacrementScheduleRow.java
 *
 * Created on May 9, 2012, 9:07:58 AM
 */
package orm.dao.Impl.GUI;

import com.toedter.calendar.JDateChooser;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import orm.Christian;
import orm.ChristianSacrement;
import orm.DAOFactory;
import orm.Pastor;

/**
 *
 * @author jean pierre
 */
public class SacrementScheduleRow extends javax.swing.JPanel {

    private DAOFactory daoFactory = DAOFactory.getInstance();
    private String sacrement;

    /** Creates new form SacrementScheduleRow */
    public SacrementScheduleRow() {
        initComponents();
        setPastor();
        try {
            txtGodParentChurch.setText(daoFactory.getParishDAO().findAll().get(0).getParishName());
        } catch (Exception ex) {
        }
    }

    public String getSacrement() {
        return sacrement;
    }

    public void setSacrement(String sacrement) {
        this.sacrement = sacrement;
    }
    

    public void setChristian() {
        cmbChristian.removeAllItems();
        List<Christian> result = new ArrayList<Christian>();
        result = daoFactory.getChristianDAO().findAll();
        for (Christian c : findChristianSacrement()) {
            result.remove(c);
        }
        for (Christian c : result) {
            cmbChristian.addItem(c.getChristianPin());
        }
    }

    private List<Christian> findChristianSacrement() {
        List<Christian> result = new ArrayList<Christian>();
        for (ChristianSacrement cs : daoFactory.getChristianSacrementDAO().findBySacrement(sacrement)) {
            result.add(cs.getChristian());
        }
        return result;
    }
//        private void setChristian() {
//        cmbChristian.removeAllItems();
//        for (Christian c : daoFactory.getChristianDAO().findActive()) {
//            cmbChristian.addItem(c.getChristianPin());
//        }
//    }

    private void setPastor() {
        cmbPastor.removeAllItems();
        for (Pastor p : daoFactory.getPastorDAO().findAll()) {
            cmbPastor.addItem(p.getFirstName() + " " + p.getLastName());
        }
    }

    public JDateChooser getChCelebrationDate() {
        return chCelebrationDate;
    }

    public JComboBox getCmbChristian() {
        return cmbChristian;
    }

    public JComboBox getCmbPastor() {
        return cmbPastor;
    }

    public DAOFactory getDaoFactory() {
        return daoFactory;
    }

    public JTextField getTxtGodParent() {
        return txtGodParent;
    }

    public JTextField getTxtGodParentChurch() {
        return txtGodParentChurch;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbChristian = new javax.swing.JComboBox();
        txtGodParent = new javax.swing.JTextField();
        chCelebrationDate = new com.toedter.calendar.JDateChooser();
        cmbPastor = new javax.swing.JComboBox();
        txtGodParentChurch = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(0, 0, 0), null));

        cmbChristian.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbChristian.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbChristianItemStateChanged(evt);
            }
        });

        txtGodParent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGodParentActionPerformed(evt);
            }
        });

        chCelebrationDate.setDateFormatString("dd/MM/yyyy");

        cmbPastor.setEditable(true);
        cmbPastor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cmbChristian, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(chCelebrationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbPastor, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGodParent, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGodParentChurch, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmbChristian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(chCelebrationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(cmbPastor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(txtGodParent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(txtGodParentChurch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

private void cmbChristianItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbChristianItemStateChanged
    try {
        Christian christian = daoFactory.getChristianDAO().findByChristianPin((String) cmbChristian.getSelectedItem());
        cmbChristian.setToolTipText(christian.getFullName());
    } catch (Exception ex) {
    }

}//GEN-LAST:event_cmbChristianItemStateChanged

private void txtGodParentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGodParentActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_txtGodParentActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser chCelebrationDate;
    private javax.swing.JComboBox cmbChristian;
    private javax.swing.JComboBox cmbPastor;
    private javax.swing.JTextField txtGodParent;
    private javax.swing.JTextField txtGodParentChurch;
    // End of variables declaration//GEN-END:variables
}
